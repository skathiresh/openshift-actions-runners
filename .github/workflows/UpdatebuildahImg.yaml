name: Update Runner buildah Images
on:
  workflow_dispatch:

env:
#  BASE_IMG_NAME: runner
#  BASE_IMG_DIR: base

  BUILDAH_IMG_NAME: buildah-runner
  BUILDAH_IMG_DIR: buildah
  
jobs:
  update_images:
    name: Update images
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      - uses: redhat-actions/common/commit-data@v1
        id: commit_data

      - uses: lots0logs/gh-action-get-changed-files@2.1.4
        id: get_changed_files
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine changed directories
        id: is_dir_changed
        uses: actions/github-script@v4
        with:
          script: |
            const changedFiles = ${{ steps.get_changed_files.outputs.all }};
            console.log(`Changed files: ${JSON.stringify(changedFiles)}`);

            // console.log(`payload ${JSON.stringify(context.payload)}`);
            // console.log(`eventName ${JSON.stringify(context.eventName)}`);

            const BASE = "base";
            const dirsChanged = {
              buildah: false,
            };

            Object.keys(dirsChanged).forEach((dir) => {
              const changed = changedFiles.find((changedFile) => changedFile.startsWith(dir + "/")) != null;
              dirsChanged[dir] = changed;
            });

            let rebuildAll = false;
            if (context.ref.startsWith("refs/tags/")) {
              console.log(`Tag build; all images will be rebuilt.`);
              rebuildAll = true;
            }
            else if (context.eventName === "workflow_dispatch") {
              console.log(`Workflow triggered by workflow_dispatch; all images will be rebuilt`);
              rebuildAll = true;
            }
            else if (dirsChanged[BASE]) {
              console.log("Base image changed; all images will be rebuilt.");
              rebuildAll = true;
            }

            Object.keys(dirsChanged).forEach((dir) => {
              const changed = rebuildAll || dirsChanged[dir];

              const outputName = (dir + "_changed").toUpperCase();
              console.log(`${outputName}=${changed}`)
              core.exportVariable(outputName, changed);
            });

            // const anyChanged = Object.entries(dirsChanged).find(([k, v] => dirsChanged[k]));
            return dirsChanged;

      - name: Determine image tag
        shell: bash
        run: |
          export IMG_TAGS=latest
          export GIT_TAG="${{ steps.commit_data.outputs.tag }}"
          export BRANCH="${{ steps.commit_data.outputs.branch }}"

          if [[ -n "$GIT_TAG" ]]; then
            IMG_TAGS="$GIT_TAG"
          elif [[ -n "$BRANCH" ]]; then
            if [[ "$BRANCH" == "main" ]]; then
              IMG_TAGS="latest"
            else
              IMG_TAGS=$BRANCH
            fi
          else
            IMG_TAGS="${{ steps.commit_data.outputs.short_sha }}"
          fi

          echo "IMG_TAGS=$IMG_TAGS" >> $GITHUB_ENV
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          echo "Tagging images with '$IMG_TAGS'"

      # The child image builds are done on the same machine so that
      # it doesn't have to pull the updated base image; it's already there locally.
      - name: Determine parent image name and tag
        shell: bash
        run: |
          export FIRST_TAG=$(echo "${{ env.IMG_TAGS }}" | awk '{ print $1 }')

          # export BASE_IMG=${{ env.REGISTRY_URL }}/${{ env.BASE_IMG_NAME }}:$FIRST_TAG
          export BASE_IMG=${{ env.BASE_IMG_NAME }}:$FIRST_TAG
          echo "Base image is '$BASE_IMG'"
          echo BASE_IMG=$BASE_IMG >> $GITHUB_ENV

      - name: Build buildah image
        if: |
          always() &&
          env.BUILDAH_CHANGED == 'true' &&
          env.BUILD_CHILDREN == 'true'
        id: build_buildah
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.BUILDAH_IMG_NAME }}
          tags: ${{ env.IMG_TAGS }}
          oci: true
          context:
            ${{ env.BUILDAH_IMG_DIR }}
          dockerfiles:
            ${{ env.BUILDAH_IMG_DIR }}/Containerfile
          build-args: |
            BASE_IMG=${{ env.BASE_IMG }}

      - name: Push buildah image
        if: |
          steps.build_buildah.outcome == 'success' &&
          steps.commit_data.outputs.is_pr == 'false'
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ env.BUILDAH_IMG_NAME }}
          tags: ${{ env.IMG_TAGS }}
          registry: ${{ secrets.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
